# @package _global_

defaults:
  # - /benchmark/rearrange: pick_spot
  # pick_spot drop-in replacement
  - /habitat: habitat_config_base
  - /habitat/task/rearrange: pick
  - /habitat/dataset/rearrangement: replica_cad
  # rl_skill
  - /habitat_baselines: habitat_baselines_rl_config_base
  - /habitat/simulator/sim_sensors@habitat_baselines.eval.extra_sim_sensors.third_rgb_sensor: third_rgb_sensor
  # replacing sensors
  - /habitat/simulator/agents@habitat.simulator.agents.main_agent: agent_base
  - /habitat/simulator/sim_sensors@habitat.simulator.agents.main_agent.sim_sensors.arm_depth_sensor: arm_depth_sensor
  - /habitat/simulator/sim_sensors@habitat.simulator.agents.main_agent.sim_sensors.arm_panoptic_sensor: arm_panoptic_sensor
  - /habitat/task/lab_sensors:
    - target_start_sensor
    - joint_sensor
    - is_holding_sensor
    - end_effector_sensor
    - relative_resting_pos_sensor
    - arm_binary_mask_sensor
  - _self_

# pick_spot drop-in replacement
habitat:
  gym:
    obs_keys:
      # - articulated_agent_arm_panoptic
      - articulated_agent_arm_depth
      - articulated_agent_arm_binary_mask
      - obj_start_sensor
      - joint
      - is_holding
      - relative_resting_position
  environment:
    max_episode_steps: 1250 # modified
  simulator:
    type: RearrangeSim-v0
    additional_object_paths:
      - data/objects/ycb/configs/
    needs_markers: False
    concur_render: True
    auto_sleep: True
    kinematic_mode: True
    ac_freq_ratio: 1
    step_physics: False
    agents:
      main_agent:
        radius: 0.3
        articulated_agent_urdf: ./data/robots/hab_spot_arm/urdf/hab_spot_arm.urdf
        articulated_agent_type: SpotRobot
        sim_sensors:
          arm_depth_sensor:
            height: 480
            width: 640
            hfov: 47
          arm_panoptic_sensor:
            height: 480
            width: 640
            hfov: 47
    habitat_sim_v0:
      allow_sliding: False
      enable_physics: True
  
  task: # modified
    measurements:
      force_terminate:
        max_accum_force: -1.0
        max_instant_force: -1.0
      pick_reward:
        enable_vel_penality: -1.0
        force_pen: 0.01
        max_force_pen: 0.01
        force_end_pen: 1.0
      collisions_terminate:
        max_scene_colls: 100.0
    actions:
      arm_action:
        delta_pos_limit: 0.05
      base_velocity: 
        lin_speed: 5.0
        ang_speed: 5.0

  dataset:
    data_path: data/datasets/replica_cad/rearrange/v1/{split}/rearrange_easy.json.gz

hydra:
  job:
    name: 'spot_pick_2'

habitat_baselines:
  verbose: True
  trainer_name: "ddppo"
  torch_gpu_id: 0
  tensorboard_dir: "tb"
  video_dir: "video_dir"
  video_fps: 30
  test_episode_count: -1
  eval_ckpt_path_dir: "data/new_checkpoints"
  # 26 environments will just barely be below 16gb.
  # num_environments: 26
  # 18 environments will just barely be below 11gb.
  num_environments: 18
  num_updates: -1
  total_num_steps: 1.0e8
  log_interval: 10
  num_checkpoints: 50
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True
  eval_keys_to_include_in_name: ["reward", "force", "success"]

  eval:
    video_option: [] # modified from video_option: ["disk"] to video_option: [] - Sarthak

  writer_type: 'tb'

  wb:
    project_name: 'hab3'
    entity: 'andrew-colab'
    run_name: ${hydra:job.name}_${now:%Y-%m-%d}_${now:%H-%M-%S}

  rl:
    # monolithic policy drop-in replacement
    policy:
        name: "PointNavResNetPolicy" # added this one
        action_distribution_type: "gaussian" # added this one
        action_dist:
           clamp_std: True
           std_init: -1.0
           use_std_param: True
           use_log_std: True # added this one

    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 2
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.001
      lr: 3e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 128
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512

      # Use double buffered sampling, typically helps
      # when environment time is similar or larger than
      # policy inference time during rollout generation
      use_double_buffered_sampler: False

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether the visual encoder backbone will be trained.
      train_encoder: True
      # Whether to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: resnet18
      rnn_type: LSTM
      num_recurrent_layers: 2

    