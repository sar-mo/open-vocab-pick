# @package _global_

defaults:
  - /benchmark/rearrange/skills: pick_spot
  - /habitat_baselines: habitat_baselines_rl_config_base
  # - /habitat_baselines/rl/policy@habitat_baselines.rl.policy.main_agent: monolithic
  - /habitat/simulator/sim_sensors@habitat_baselines.eval.extra_sim_sensors.third_rgb_sensor: third_rgb_sensor
  # - /habitat/simulator/sim_sensors@habitat_baselines.eval.extra_sim_sensors.arm_rgb_sensor: arm_rgb_sensor
  - override /habitat/task/lab_sensors:
    - target_start_sensor
    - joint_sensor
    - is_holding_sensor
    - end_effector_sensor
    - relative_resting_pos_sensor
    - arm_depth_bbox_sensor
  - _self_

# This yaml is designed specifically for learning a mobile gaze policy for the Boston Dynamics Spot robot.
# It uses the base pick yaml to define the basic measurements and sensors,
# and defines the needed observation keys and reward function here to train the policy.
# The major changes compared to the base pick yaml are the following:
# (1) obs_keys: we ensure these observations can be obtained from the real robot (Spot)
# (2) pick_reward: pick reward considers collisions based on a kinematic simulation
# (3) actions: Spot uses gaze action to pick up the object
# (4) simulator: we simulate the environment via the kinematic mode to facilitate sim2real transfer
habitat:
  gym:
    obs_keys:
      - arm_depth_bbox_sensor
      - articulated_agent_arm_depth
      - joint

habitat_baselines:
  verbose: False
  trainer_name: "ver"
  torch_gpu_id: 0
  tensorboard_dir: "tb"
  video_dir: "video_dir"
  video_fps: 30
  test_episode_count: -1
  eval_ckpt_path_dir: "data/new_checkpoints"
  # 26 environments will just barely be below 16gb.
  # num_environments: 26
  # 18 environments will just barely be below 11gb.
  num_environments: 18
  num_updates: -1
  total_num_steps: 1.0e8
  log_interval: 10
  num_checkpoints: 20
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True
  eval_keys_to_include_in_name: ["reward", "force", "success"]

  eval:
    video_option: ["disk"]

  rl:
    policy:
      main_agent:
          name: "PointNavResNetPolicy" # added this one
          # name: "PointNavResNetTeacherPolicy" # added this one
          action_distribution_type: "gaussian" # added this one
          action_dist:
            clamp_std: True
            std_init: -1.0
            use_std_param: True
            use_log_std: True # added this one
    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 2
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.001
      lr: 3e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 128
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512

      # Use double buffered sampling, typically helps
      # when environment time is similar or larger than
      # policy inference time during rollout generation
      use_double_buffered_sampler: False

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether the visual encoder backbone will be trained.
      train_encoder: True
      # Whether to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: resnet18
      rnn_type: LSTM
      num_recurrent_layers: 2